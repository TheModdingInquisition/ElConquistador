import net.minecraftforge.gradle.userdev.tasks.JarJar
import org.moddinginquisiton.gradle.JiJTransformer

import java.nio.file.Files

plugins {
    id 'groovy'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+' // for Parchment mappings
}

version = '1.19-1.0'
group = 'org.moddinginquisition.elconquistador'

archivesBaseName = 'elconquistador' // your modId - must be lowercase and no spaces.

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '1.18.2-2022.07.17-1.19'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all run configs
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                elconquistador { // should match archivesBaseName and your modId
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', archivesBaseName
        }

        server {
            property 'forge.enabledGameTestNamespaces', archivesBaseName
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', archivesBaseName
        }

        data {
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'elconquistador', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Comment this out if you intend on having your mod have both Groovy and Java code
sourceSets.each { sourceSet ->
    final javaDir = file("src/${sourceSet.name}/java/")
    javaDir.deleteDir()
}

// Required stuff for the `library` dependency type, which is used to include non-mod type dependencies (such as language providers).
configurations {
    library
    implementation.extendsFrom library
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
//    maven {
//        name = 'BlameJared'
//        url = 'https://maven.blamejared.com'
//    }

    maven {
        name = 'Modding Inquisition Releases'
        url = 'https://maven.moddinginquisition.org/releases'
    }

    maven {
        name = 'Modding Inquisition Snapshots'
        url = 'https://maven.moddinginquisition.org/snapshots'
    }
}

jarJar.enable()

final var jijTransform = Attribute.of('jijTransform', Boolean)

dependencies {
    attributesSchema {
        attribute jijTransform
    }
    artifactTypes.getByName('jar') {
        attributes.attribute(jijTransform, false)
    }
    registerTransform(JiJTransformer) {
        from.attribute(jijTransform, false).attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.JAR_TYPE)
        to.attribute(jijTransform, true).attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.JAR_TYPE)
    }
}

configurations {
    aplp {
        canBeConsumed = false
        canBeResolved = true
        attributes.attribute jijTransform, true
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.0.110'

    final aplpVersion = '1.1.1'

    compileOnly(group: 'net.thesilkminer.mc.austin', name: "aplp-1.19", version: aplpVersion)
    aplp(group: 'net.thesilkminer.mc.austin', name: "aplp-1.19", version: "[$aplpVersion,)", classifier: 'all')
    runtimeOnly "net.thesilkminer.mc.austin:aplp-1.19:$aplpVersion"

    jarJar 'ga.ozli.minecraftmods.groovylicious:Groovylicious:[1.19-0.2.0-SNAPSHOT,)'

    implementation fg.deobf('ga.ozli.minecraftmods.groovylicious:Groovylicious:1.19-0.2.0-SNAPSHOT')

    final String sparkVer = '1.0.0'
    compileOnly "me.lucko.spark:spark-api:$sparkVer"
    compileOnly "me.lucko.spark:spark-proto:$sparkVer"
    runtimeOnly fg.deobf("me.lucko.spark:spark-forge:$sparkVer")
}

tasks.named('jar', Jar) {
    manifest {
        attributes([
                "Specification-Title"     : archivesBaseName,
                "Specification-Vendor"    : "TheModdingInquisition",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TheModdingInquisition",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to re-obfuscate your jar file
    finalizedBy 'reobfJar'
}

afterEvaluate {
    final resolvedFiles = configurations.aplp.resolve()
    final aplpJar = resolvedFiles.stream().findFirst().orElseThrow()
    tasks.named('jarJar', JarJar) {
        it.configuration project.configurations.aplp
        it.finalizedBy 'reobfJarJar'
        it.doLast {
            JiJTransformer.doJijLast(it, aplpJar, project)
        }
    }
}

reobf {
    jarJar {}
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.encoding = 'UTF-8' // Use the UTF-8 charset for Groovy compilation
    groovyOptions.optimizationOptions.indy = true
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
